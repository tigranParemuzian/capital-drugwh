<?php

namespace AppBundle\Repository;
use AppBundle\Entity\Booking;

/**
 * BookingRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BookingRepository extends \Doctrine\ORM\EntityRepository
{
    public function findUniq($userId, $prodId){

        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('b')
            ->from('AppBundle:Booking', 'b')
            ->leftJoin('b.product', 'p')
            ->leftJoin('b.client', 'c')
            ->where('b.status =:st')
            ->andWhere('c.id =:uid')
            ->andWhere('p.id =:pid')
            ->setParameter('st', Booking::IS_NEW)
            ->setParameter('uid', $userId)
            ->setParameter('pid', $prodId)
            ->getQuery()->getOneOrNullResult();

        ;

    }

    /**
     * This function use to get all new bookings
     *
     * @param $userId
     * @return array
     */
    public function findAllNewByClient($userId){
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('b')
            ->from('AppBundle:Booking', 'b')
            ->leftJoin('b.client','c')
            ->leftJoin('b.product', 'p')
            ->where('b.status =:st')
            ->andWhere('c.id =:cid')
            ->orderBy('p.name','ASC')
            ->setParameter('st', Booking::IS_NEW)
            ->setParameter('cid', $userId)
            ->getQuery()->getResult();
        ;
    }

    /**
     * This function use to update store
     *
     * @param $bId
     * @param $lot
     * @param $supDate
     * @param $expDate
     */
    public function updateStore($bId, $lot, $supDate, $expDate){

        $this->getEntityManager()
            ->createQueryBuilder()
            ->update('AppBundle:Booking', 'b')
            ->set('b.lot', ':lot')
            ->set('b.expiryDate', ':exDate')
            ->set('b.shipDate', ':sup')
            ->where('b.id IN (:bId)')
            ->setParameter('bId', $bId)
            ->setParameter('lot', $lot)
            ->setParameter('exDate', $expDate)
            ->setParameter('sup', $supDate)
            ->getQuery()->execute()
        ;
    }

    public function findRealByProduct($prodId){

        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('b')
            ->from('AppBundle:Booking', 'b')
            ->innerJoin('b.product', 'p', 'WITH', 'p.id = :pId')
            ->leftJoin('b.client', 'c')
            ->where('b.invoice IS NOT NULL AND b.lot IS NULL AND b.shipDate IS NULL AND b.expiryDate IS NULL AND b.count >0 ')
            ->orderBy('b.id', 'ASC')
            ->setParameter('pId', $prodId)
            ->getQuery()->getResult();
        ;
    }

//    public function insertBooking(){
//        $this->getEntityManager()
//            ->createQuery('INSERT INTO AppBundle:Booking')
//            ->insert('AppBundle:Booking')
//            ->setValue('name', '?')
//            ->setValue('password', '?')
//            ->setParameter(0, $username)
//            ->setParameter(1, $password)
//    }
}
