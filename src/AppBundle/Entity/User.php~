<?php

namespace AppBundle\Entity;

use AppBundle\Traits\File;
use Doctrine\ORM\Mapping as ORM;
use FOS\UserBundle\Entity\User as BaseUser;
use JMS\Serializer\Annotation\Groups;
use JMS\Serializer\Annotation\VirtualProperty;
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Context\ExecutionContext;
use Symfony\Component\Validator\Context\ExecutionContextInterface;
use Gedmo\Mapping\Annotation as Gedmo;

/**
 *
 * @ORM\Table(name="fos_user")
 * @ORM\Entity(repositoryClass="AppBundle\Repositories\UserRepository")
 * @ORM\HasLifecycleCallbacks()
 * @UniqueEntity("phone")
 */
class User extends BaseUser
{
    use File;


    /**
     * @ORM\Id
     * @ORM\Column(type="integer")
     * @ORM\GeneratedValue(strategy="AUTO")
     * @Groups({"booking_history", "user-info"})
     *
     */
    protected $id;

    /**
     * @var
     * @ORM\Column(name="first_name", type="string", nullable=true)
     * @Groups({"user-info", "booking_list"})
     */
    private $firstName;

    /**
     * @var
     * @ORM\Column(name="last_name", type="string", nullable=true)
     * @Groups({"user-info", "booking_list"})
     */
    private $lastName;

    /**
     * @var
     * @ORM\Column(name="birthday", type="datetime", nullable=true)
     */
    private $birthday;

    /**
     * @var
     * @ORM\Column(name="phone", type="string", length=20 , nullable=false, unique=true)
     * @Assert\NotBlank(message="user.phone.not_blank", groups={"Registration", "Profile"})
     * @Assert\Length(
     *     min=9,
     *     max=13,
     *     minMessage="user.phone.minLength",
     *     maxMessage="user.phone.maxLength",
     *     groups={"Registration", "Profile"}
     * )
     * @Groups({"user-info", "booking_list"})
     */
    private $phone;

    /**
     * @var
     * @ORM\OneToOne(targetEntity="AppBundle\Entity\UserSettings", inversedBy="user")
     * @ORM\JoinColumn(name="user_settings", referencedColumnName="id")
     */
    private $userSettings;

    /**
     * @var
     * @ORM\Column(name="is_valid", type="boolean")
     */
    private $isValid;

    /**
     * @var
     * @ORM\OneToMany(targetEntity="AppBundle\Entity\UserEmails", mappedBy="user", cascade={"all"}, orphanRemoval=true)
     */
    private $userEmails;

    /**
     * @var
     * @ORM\OneToMany(targetEntity="AppBundle\Entity\UserPrice", mappedBy="user", cascade={"all"}, orphanRemoval=true)
     */
    private $userPrice;

    /**
     * @var
     * @ORM\Column(name="customer_id", type="integer")
     */
    private $customerId;

    /**
     * @var
     * @ORM\Column(name="sale_percent", type="float", nullable=true)
     */
    private $salePercent;

    public function __toString()
    {
        return $this->id ? $this->username : '';
//        return parent::__toString(); // TODO: Change the autogenerated stub
    }

    public function __construct()
    {
        parent::__construct();
        $this->isValid=false;
        $this->customerId =  rand(1000,10000) . $this->id;
        $this->userPrice = new \Doctrine\Common\Collections\ArrayCollection();
        $this->userEmails = new \Doctrine\Common\Collections\ArrayCollection();
    }

    /**
     * @VirtualProperty()
     *
     * @Groups({"user-info", "booking_list"})
     */
    public function getClientFullName() {

        return $this->firstName . ' ' . $this->lastName;
    }

    /**
     * @return mixed
     */
    public function getFirstName()
    {
        return $this->firstName;
    }

    /**
     * @param mixed $firstName
     */
    public function setFirstName($firstName)
    {
        $this->firstName = $firstName;
    }

    /**
     * @return mixed
     */
    public function getLastName()
    {
        return $this->lastName;
    }

    /**
     * @param mixed $lastName
     */
    public function setLastName($lastName)
    {
        $this->lastName = $lastName;
    }

    /**
     * @return mixed
     */
    public function getBirthday()
    {
        return $this->birthday;
    }

    /**
     * @param mixed $birthday
     */
    public function setBirthday($birthday)
    {
        $this->birthday = $birthday;
    }

    /**
     * Set phone
     *
     * @param string $phone
     * @return User
     */
    public function setPhone($phone)
    {
        $this->phone = $phone;

        return $this;
    }

    /**
     * Get phone
     *
     * @return string 
     */
    public function getPhone()
    {
        return $this->phone;
    }

    /**
     * Set userSettings
     *
     * @param \AppBundle\Entity\UserSettings $userSettings
     *
     * @return User
     */
    public function setUserSettings(\AppBundle\Entity\UserSettings $userSettings = null)
    {
        $this->userSettings = $userSettings;

        return $this;
    }

    /**
     * Get userSettings
     *
     * @return \AppBundle\Entity\UserSettings
     */
    public function getUserSettings()
    {
        return $this->userSettings;
    }

    /**
     * Set isValid
     *
     * @param boolean $isValid
     *
     * @return User
     */
    public function setIsValid($isValid)
    {
        $this->isValid = $isValid;

        return $this;
    }

    /**
     * Get isValid
     *
     * @return boolean
     */
    public function getIsValid()
    {
        return $this->isValid;
    }

    /**
     * Set customerId
     *
     * @param integer $customerId
     *
     * @return User
     */
    public function setCustomerId($customerId)
    {
        $this->customerId = $customerId;

        return $this;
    }

    /**
     * Get customerId
     *
     * @return integer
     */
    public function getCustomerId()
    {
        return $this->customerId;
    }

    /**
     * Add userEmail
     *
     * @param \AppBundle\Entity\UserEmails $userEmail
     *
     * @return User
     */
    public function addUserEmail(\AppBundle\Entity\UserEmails $userEmail)
    {
        $this->userEmails[] = $userEmail;

        return $this;
    }

    /**
     * Remove userEmail
     *
     * @param \AppBundle\Entity\UserEmails $userEmail
     */
    public function removeUserEmail(\AppBundle\Entity\UserEmails $userEmail)
    {
        $this->userEmails->removeElement($userEmail);
    }

    /**
     * Get userEmails
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getUserEmails()
    {
        return $this->userEmails;
    }

    /**
     * Set salePercent
     *
     * @param float $salePercent
     *
     * @return User
     */
    public function setSalePercent($salePercent)
    {
        $this->salePercent = $salePercent;

        return $this;
    }

    /**
     * Get salePercent
     *
     * @return float
     */
    public function getSalePercent()
    {
        return $this->salePercent;
    }

    /**
     * Add userPrice
     *
     * @param \AppBundle\Entity\UserPrice $userPrice
     *
     * @return User
     */
    public function addUserPrice(\AppBundle\Entity\UserPrice $userPrice)
    {
        $this->userPrice[] = $userPrice;

        return $this;
    }

    /**
     * Remove userPrice
     *
     * @param \AppBundle\Entity\UserPrice $userPrice
     */
    public function removeUserPrice(\AppBundle\Entity\UserPrice $userPrice)
    {
        $this->userPrice->removeElement($userPrice);
    }

    /**
     * Get userPrice
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getUserPrice()
    {
        return $this->userPrice;
    }
}
